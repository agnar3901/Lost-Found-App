// ReportLostItemPage.js
import React, { useState } from 'react';
import { View, Text, TextInput, Button, Image, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

const ReportLostItemPage = () => {
  const [lostItem, setLostItem] = useState({
    image: '',
    name: '',
    location: '',
    date: '',
    time: '',
    description: '',
    contactNumber: '',
  });

  const pickImage = async () => {
    // Ask for permission to access the camera
    const permissionResult = await ImagePicker.requestCameraPermissionsAsync();

    if (permissionResult.granted === false) {
      alert("You've refused to allow this app to access your camera!");
      return;
    }

    // Launch the camera
    let result = await ImagePicker.launchCameraAsync({
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    if (!result.cancelled) {
      setLostItem({ ...lostItem, image: result.uri });
    }
  };

  const handleUpload = () => {
    // Logic to upload lost item data
    console.log('Uploading lost item:', lostItem);
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.title}>Report Lost Item</Text>

      <TouchableOpacity style={styles.imagePicker} onPress={pickImage}>
        <Text style={styles.imagePickerText}>Tap to capture image of the lost item</Text>
      </TouchableOpacity>
      {lostItem.image ? (
        <Image source={{ uri: lostItem.image }} style={styles.image} />
      ) : null}

      <TextInput
        style={styles.input}
        placeholder="Name of the item"
        value={lostItem.name}
        onChangeText={(value) => setLostItem({ ...lostItem, name: value })}
      />

      <TextInput
        style={styles.multilineInput}
        placeholder="Location of the item found"
        multiline
        numberOfLines={2}
        value={lostItem.location}
        onChangeText={(value) => setLostItem({ ...lostItem, location: value })}
      />

      <View style={styles.dateTimeContainer}>
        <TextInput
          style={[styles.input, styles.dateTimeInput]}
          placeholder="Date found"
          value={lostItem.date}
          onChangeText={(value) => setLostItem({ ...lostItem, date: value })}
        />
        <TextInput
          style={[styles.input, styles.dateTimeInput]}
          placeholder="Time found"
          value={lostItem.time}
          onChangeText={(value) => setLostItem({ ...lostItem, time: value })}
        />
      </View>

      <TextInput
        style={styles.multilineInput}
        placeholder="Description of the person who found"
        multiline
        numberOfLines={7}
        value={lostItem.description}
        onChangeText={(value) => setLostItem({ ...lostItem, description: value })}
      />

      <TextInput
        style={styles.input}
        placeholder="Contact number of the finder"
        value={lostItem.contactNumber}
        onChangeText={(value) => setLostItem({ ...lostItem, contactNumber: value })}
      />

      <Button title="Upload" onPress={handleUpload} />
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 20,
    paddingLeft: 8,
  },
  multilineInput: {
    height: 100,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 20,
    paddingLeft: 8,
    textAlignVertical: 'top',
  },
  dateTimeContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  dateTimeInput: {
    flex: 1,
    marginRight: 10,
  },
  imagePicker: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 20,
  },
  imagePickerText: {
    color: 'gray',
  },
  image: {
    width: 100,
    height: 100,
    marginBottom: 20,
  },
});

export default ReportLostItemPage;
